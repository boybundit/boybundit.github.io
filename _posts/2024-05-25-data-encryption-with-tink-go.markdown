---
layout: post
title: ‡∏•‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢ tink-go
slug: data-encryption-with-tink-go
date: 2024-05-25 +0700
categories: programming
---

‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö data ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á encrypt/decrypt ‡πÇ‡∏î‡∏¢ library ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô [Tink](https://developers.google.com/tink) ‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ‡∏´‡∏ô‡∏∂‡πà‡∏á ‡πÄ‡∏•‡∏¢‡∏°‡∏≤‡∏•‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏î‡∏π‡∏ß‡πà‡∏≤ ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ [tink-go](https://github.com/tink-crypto/tink-go) ‡∏ï‡∏£‡∏á‡πÜ‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏¢‡∏±‡∏á‡∏á‡∏±‡∏¢‡∏Å‡∏±‡∏ô‡∏ö‡πâ‡∏≤‡∏á

‡πÇ‡∏î‡∏¢ use case ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£ [encrypt data](https://developers.google.com/tink/encrypt-data) ‡πÅ‡∏•‡∏∞ decrypt ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô plaintext ‡πÑ‡∏î‡πâ ‡∏ã‡∏∂‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏ô encrypt ‡πÅ‡∏•‡∏∞ decrypt ‡πÄ‡∏õ‡πá‡∏ô service ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡πÄ‡∏≠‡∏á ‡∏à‡∏∂‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡πÜ‡∏î‡πâ‡∏ß‡∏¢ [symmetric-key algorithm](https://en.wikipedia.org/wiki/Symmetric-key_algorithm) ‡∏ó‡∏µ‡πà shared secret key ‡∏Å‡∏±‡∏ô

‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏á‡πà‡∏≤‡∏¢‡πÜ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠ ‡∏ñ‡πâ‡∏≤ key ‡πÄ‡∏Å‡∏¥‡∏î‡∏´‡∏•‡∏∏‡∏î‡πÑ‡∏õ hacker ‡∏Å‡πá‡∏à‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ decrypt ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏•‡∏¢! ‡πÄ‡∏Ñ‡πâ‡∏≤‡πÄ‡∏•‡∏¢‡∏°‡∏µ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏°‡∏±‡∏ô‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ç‡∏±‡πâ‡∏ô ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ [envelop encryption](https://cloud.google.com/kms/docs/envelope-encryption) ‡πÇ‡∏î‡∏¢‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏°‡∏µ key ‡∏≠‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏°‡∏µ 2 ‡∏≠‡∏±‡∏ô‡πÅ‡∏ó‡∏ô ‡∏Ñ‡∏∑‡∏≠

1. DEK ‡∏´‡∏£‡∏∑‡∏≠ Data Encryption Key ‡∏Ñ‡∏∑‡∏≠ key ‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ encrypt/decrypt ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πá‡∏ö DEK ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô database ‡πÅ‡∏ö‡∏ö plaintext ‡πÅ‡∏ï‡πà‡∏à‡∏∞ encrypt ‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏ß‡∏¢ KEK ‡∏Å‡πà‡∏≠‡∏ô
2. KEK ‡∏´‡∏£‡∏∑‡∏≠ Key Encryption Key ‡∏Ñ‡∏∑‡∏≠ key ‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ encrypt/decrypt DEK ‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡πÄ‡∏≠‡∏á ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡πÑ‡∏õ‡πÉ‡∏™‡πà‡πÑ‡∏ß‡πâ‡πÉ‡∏ô Key Management System (KMS) ‡πÄ‡∏ä‡πà‡∏ô [Vault](https://www.vaultproject.io/)

![image](assets/images/2024-05-25-data-encryption-with-tink-go/envelope-encyption.png "https://cloud.google.com/kms/docs/envelope-encryption")

‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ ‡∏à‡∏∞‡πÄ‡∏´‡πá‡∏ô‡∏ß‡πà‡∏≤‡∏ñ‡πâ‡∏≤ database ‡∏´‡∏•‡∏∏‡∏î‡πÑ‡∏õ‡∏û‡∏£‡πâ‡∏≠‡∏° DEK hacker ‡∏Å‡πá‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ KEK ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ô‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏™‡∏á‡∏™‡∏±‡∏¢‡∏ß‡πà‡∏≤ ‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏≥‡πÑ‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πá‡∏ö DEK ‡πÉ‡∏ô KMS ‡πÑ‡∏õ‡πÄ‡∏•‡∏¢‡∏Å‡πá‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á? ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ó‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏µ DEK ‡πÑ‡∏î‡πâ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å ‡∏à‡∏∞ generate DEK ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö data ‡πÄ‡∏•‡∏¢‡∏Å‡πá‡πÑ‡∏î‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡πÄ‡∏Å‡πá‡∏ö DEK ‡πÑ‡∏ß‡πâ‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ö data ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏ó‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏Å‡πá‡∏à‡∏∞ secure ‡∏™‡∏∏‡∏î‡πÜ‡πÑ‡∏õ‡πÄ‡∏•‡∏¢ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ó‡∏∏‡∏Å record ‡∏ñ‡∏π‡∏Å encrypt ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ô‡∏•‡∏∞ key ‡∏Å‡∏±‡∏ô‡∏´‡∏°‡∏î‡πÄ‡∏•‡∏¢ hacker ‡∏£‡πâ‡∏≠‡∏á‡πÑ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß üòÇ

‡∏ó‡∏µ‡∏ô‡∏µ‡πâ‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ key ‡πÄ‡∏¢‡∏≠‡∏∞‡∏Ç‡∏ô‡∏≤‡∏î‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏∞‡πÑ‡∏õ‡πÉ‡∏ä‡πâ KMS ‡∏°‡∏±‡∏ô‡∏à‡∏∞‡πÑ‡∏°‡πà scalable ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ KMS ‡∏°‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô centralized service ‡∏°‡∏µ‡∏≠‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡∏°‡∏µ microservices ‡πÄ‡∏¢‡∏≠‡∏∞‡πÅ‡∏¢‡∏∞‡πÑ‡∏õ‡∏´‡∏°‡∏î ‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ envelop encryption ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ KEK ‡∏ô‡πâ‡∏≠‡∏¢‡πÜ (‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô KMS) ‡πÅ‡∏ï‡πà‡∏°‡∏µ DEK ‡πÄ‡∏¢‡∏≠‡∏∞‡πÜ (‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏Å‡∏±‡∏ö data) ‡πÑ‡∏î‡πâ ‡∏â‡∏•‡∏≤‡∏î‡∏™‡∏∏‡∏î‡πÜ‡πÑ‡∏õ‡πÄ‡∏•‡∏¢!

‡∏û‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏≤‡∏•‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏Å‡∏±‡∏ô ‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ KMS ‡πÑ‡∏ß‡πâ‡πÄ‡∏Å‡πá‡∏ö KEK ‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏£‡∏≤‡∏à‡∏∞ run vault ‡∏î‡πâ‡∏ß‡∏¢ docker-compose ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ

```yaml
services:
  vault:
    image: vault:1.13.3
    restart: always
    container_name: vault
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: "root"
    ports:
      - "8200:8200"
    cap_add:
      - IPC_LOCK
    command: "vault server -dev-tls -dev-listen-address=0.0.0.0:8200"
```

‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏¢‡∏¥‡∏á API ‡πÑ‡∏õ‡∏™‡∏£‡πâ‡∏≤‡∏á KEK ‡∏î‡πâ‡∏ß‡∏¢ [transit secret engine](https://developer.hashicorp.com/vault/docs/secrets/transit)

```sh
curl --request POST --header "X-Vault-Token: root" \
  --data '{"type":"transit"}' --insecure \
  https://localhost:8200/v1/sys/mounts/transit

curl --request POST --header "X-Vault-Token: root" \
  --data '{"type":"aes128-gcm96"}' --insecure \
  https://localhost:8200/v1/transit/keys/demo-tink
```

‡πÇ‡∏î‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ó‡πà‡∏Ç‡∏≠‡∏á vault transit secret engine ‡∏Å‡πá‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á expose KEK ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏à‡∏≤‡∏Å KMS ‡πÄ‡∏•‡∏¢ ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠ generate encrypted DEK ‡πÅ‡∏•‡∏∞ decrypt DEK ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢

‡∏Ç‡∏±‡πâ‡∏ô‡πÅ‡∏£‡∏Å‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á client ‡∏°‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö KMS ‡πÅ‡∏•‡∏∞ KEK ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏Å‡πà‡∏≠‡∏ô

```go
const keyURI = "hcvault://localhost:8200/transit/keys/demo-tink"
client, _ := hcvault.NewClient(keyURI, &tls.Config{InsecureSkipVerify: true}, "root")
kekAEAD, _ := client.GetAEAD(keyURI)
newHandle, _ := keyset.NewHandle(aead.AES256GCMKeyTemplate())
```

‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏Å‡πá generate encrypted DEK

```go
keysetAssociatedData := []byte("keyset encryption example")
buf := new(bytes.Buffer)
writer := keyset.NewBinaryWriter(buf)
_ = newHandle.WriteWithAssociatedData(writer, kekAEAD, keysetAssociatedData)
encryptedKeyset := buf.Bytes()
```

‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πá decrypt DEK ‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ

```go
reader := keyset.NewBinaryReader(bytes.NewReader(encryptedKeyset))
handle, _ := keyset.ReadWithAssociatedData(reader, kekAEAD, keysetAssociatedData)
```

‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡∏Å‡πá‡∏°‡∏µ DEK ‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° encrypt/decrypt data ‡πÅ‡∏•‡πâ‡∏ß!

```go
primitive, _ := aead.New(handle)

plaintext := []byte("message")
associatedData := []byte("example encryption")
ciphertext, _ := primitive.Encrypt(plaintext, associatedData)

decrypted, _ := primitive.Decrypt(ciphertext, associatedData)
fmt.Println(string(decrypted)) // Output: message
```

‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏ß‡πà‡∏≤ [tink-go](https://github.com/tink-crypto/tink-go) ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö API ‡∏°‡∏≤‡∏î‡∏µ‡∏°‡∏≤‡∏Å ‡∏Ñ‡∏∑‡∏≠‡∏°‡∏±‡∏ô‡∏à‡∏∞‡πÑ‡∏°‡πà expose plaintext DEK ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤ ‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏ú‡∏•‡∏≠‡πÑ‡∏õ save ‡∏°‡∏±‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á save encrypted DEK

‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏î‡∏π‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å <https://github.com/boybundit/demo-tink> ‡∏Ñ‡∏£‡∏±‡∏ö üòÑ
